{"version":3,"sources":["components/InstructionScript.js","components/DataArray.js","App.js","serviceWorker.js","index.js"],"names":["InstructionScript","currInstructionPointer","this","props","pointer","script","map","item","index","key","style","display","backgroundColor","Component","DataArray","currDataPointer","className","Form","inline","onSubmit","handleStep","Label","htmlFor","srOnly","Control","id","placeholder","Button","variant","type","Table","size","bordered","data","width","borderless","data_pointer_array","App","state","instruction_pointer","data_pointer","input","output","done","error","handleSubmit","bind","event","preventDefault","rawScript","target","value","encodedScript","encodeURIComponent","fetch","method","then","res","json","result","dataArray","slice","setState","console","log","count","Math","max","dataPointerArray","Array","fill","Group","controlId","as","rows","defaultValue","Text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ac4e380a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class InstructionScript extends Component{\r\n\r\n  render() {\r\n    let currInstructionPointer = this.props.pointer;\r\n    return(\r\n      <div>\r\n        <h2>Instruction Script</h2>\r\n        <div>\r\n          {this.props.script.map((item, index) => (\r\n            currInstructionPointer === index ?\r\n              <p key={index} style={{display:'inline', backgroundColor: '#FFFF00'}}>{item}</p>\r\n              :<p key={index} style={{display:'inline'}}>{item}</p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};","import React, {Component} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nexport default class DataArray extends Component{\r\n\r\n  render() {\r\n    let currDataPointer = 0;\r\n    if (this.props.pointer) currDataPointer = this.props.pointer;\r\n    return(\r\n      <div>\r\n        <div className=\"brainfuck-step\">\r\n        <h2>Data Array</h2>\r\n          <Form inline className=\"float-sm-right\" onSubmit={this.props.handleStep}>\r\n            <Form.Label htmlFor=\"inlineFormInputName2\" srOnly>\r\n              Count\r\n            </Form.Label>\r\n            <Form.Control\r\n              className=\"mb-2 mr-sm-2\"\r\n              id=\"inlineFormInputName2\"\r\n              placeholder=\"Count\"\r\n            />\r\n            <Button variant=\"primary\" className=\"mb-2\" type=\"submit\">\r\n              Step\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n        <Table size=\"sm\" bordered>\r\n          <tbody>\r\n            <tr>\r\n              {this.props.data.map((item, index) => (\r\n                currDataPointer === index ?\r\n                <td style={{backgroundColor: '#FFFF00'}} width=\"5%\" key={index}>{item}</td>\r\n                :<td width=\"5%\" key={index}>{item}</td>\r\n              ))}\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n        <Table borderless size=\"sm\">\r\n          <tbody>\r\n           <tr>\r\n            {this.props.data_pointer_array.map((item, index) => (\r\n              <td width=\"5%\" key={index}>{item}</td>\r\n            ))}\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n};","import React, {Component} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './App.css';\r\n\r\nimport InstructionScript  from './components/InstructionScript';\r\nimport DataArray  from './components/DataArray';\r\n\r\nexport default class App extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      instruction_pointer: 0,\r\n      data_pointer: 0,\r\n      data_pointer_array: [],\r\n      input: \"\",\r\n      output: \"\",\r\n      script: [\"\"],\r\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //16 cells of data\r\n      done: false,\r\n      error: false\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleStep = this.handleStep.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    //handle BF script\r\n    var rawScript = event.target[0].value;\r\n    var encodedScript = encodeURIComponent(rawScript); // encode for special characters\r\n\r\n    //handle Input\r\n    let input = \"\";\r\n    if (event.target[1].value) {\r\n      input = event.target[1].value;\r\n    }\r\n\r\n    fetch(\"https://bf-api.symops.io/api/v1/brainfuck/?script=\" + encodedScript + \"&input=\" + input, \r\n      {method: 'POST', })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          const dataArray = result.data.slice(0,15);\r\n          this.setState({\r\n            id: result.id,\r\n            instruction_pointer: result.instruction_pointer,\r\n            data_pointer: result.data_pointer,\r\n            input: result.input,\r\n            output: result.output,\r\n            script: result.script,\r\n            data: dataArray,\r\n            done: result.done\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n  }\r\n\r\n  handleStep(event) {\r\n    event.preventDefault();\r\n    if(!this.state.done) { //avoid calling API if execution is complete\r\n      var count = Math.max(1, event.target[0].value); // default step: 1\r\n      let dataPointerArray = new Array(15).fill(\" \");\r\n\r\n      fetch(\"https://bf-api.symops.io/api/v1/brainfuck/\" + this.state.id + \"/step?count=\" + count, \r\n      {method: 'POST', })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          const dataArray = result.data.slice(0,15);\r\n          dataPointerArray[result.data_pointer] = \"^\"; // include caret at data pointer\r\n          this.setState({\r\n            id: result.id,\r\n            instruction_pointer: result.instruction_pointer,\r\n            data_pointer: result.data_pointer,\r\n            data_pointer_array: dataPointerArray, \r\n            output: result.output,\r\n            script: result.script,\r\n            data: dataArray,\r\n            done: result.done\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <div>\r\n          <h1>\r\n            Enter your Brainfreeze <code>script</code> and hit submit.\r\n          </h1>\r\n        </div>\r\n        </header>\r\n        <div className=\"brainfuck-script\">\r\n          <Form onSubmit={this.handleSubmit}>\r\n            <Form.Group controlId=\"formScript\">\r\n              <Form.Label>Brainfreeze Script</Form.Label>\r\n              <Form.Control \r\n                as=\"textarea\" \r\n                rows=\"3\" \r\n                placeholder=\"Enter brainfuck script\"\r\n                defaultValue=\"++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.\"\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Please only include brainfreeze operations.\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"brainfuck-input\">\r\n             <Form.Label>Input</Form.Label>\r\n              <Form.Control placeholder=\"Enter input\" />\r\n              <Form.Text className=\"text-muted\">\r\n              This is optional.\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n        {this.state.id &&\r\n          <div>\r\n            <InstructionScript \r\n              pointer={this.state.instruction_pointer}\r\n              script={this.state.script}/> \r\n            <DataArray \r\n              pointer={this.state.data_pointer} \r\n              data_pointer_array={this.state.data_pointer_array}\r\n              data={this.state.data}\r\n              handleStep={this.handleStep} />\r\n            <div>\r\n              <code className=\"output\">Output: {this.state.output}</code>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}